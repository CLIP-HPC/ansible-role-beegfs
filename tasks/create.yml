---
- name: Ensure the BeeGFS package repo is defined
  get_url:
    url: "{{ beegfs_repo_url }}"
    dest: /etc/yum.repos.d/beegfs-rhel7.repo
  become: yes

# Task flow inspired by MichaelRigart.interfaces role - thanks markgoddard
# Some systems do not support /etc/modules-load.d, in which case we fall back
# to /etc/modules.
- name: Check whether /etc/modules-load.d exists
  stat:
    path: /etc/modules-load.d
  register: modules_load_stat

- name: Ensure any required kernel modules are loaded
  modprobe:
    name: "{{ item }}"
    state: present
  become: yes
  with_items: "{{ beegfs_kmod_preload }}"

- name: Make sure required modules are loaded at boot via /etc/modules-load.d
  lineinfile:
    dest: /etc/modules-load.d/beegfs.conf
    line: "{{ item }}"
    create: yes
  become: yes
  when: modules_load_stat.stat.exists
  with_items: "{{ beegfs_kmod_preload }}"

- name: Make sure required modules are loaded at boot via /etc/modules
  lineinfile:
    dest: /etc/modules
    line: "{{ item }}"
  become: yes
  when: not modules_load_stat.stat.exists
  with_items: "{{ beegfs_kmod_preload }}"

- name: Stop and delete server and client service
  block:
  - name: Ensures BeeGFS client service is not running if force_format is requested
    service:
      name: beegfs-client
      state: stopped
    become: yes
    when:
    - beegfs_enable.oss | bool
    - beegfs_enable.client | bool
  - name: Stop BeeGFS server services
    service:
      name: "{{ item.name }}"
      state: stopped
    become: yes
    when: item.enable | bool
    with_items:
    - { name: beegfs-mgmtd, enable: "{{ beegfs_enable.mgmt }}" }
    - { name: beegfs-meta, enable: "{{ beegfs_enable.meta }}" }
    - { name: beegfs-admon, enable: "{{ beegfs_enable.admon }}" }
  - name: Remove other beegfs folders
    file:
      path: "{{ item.name }}"
      state: absent
    become: yes
    when: item.enable | bool
    with_items:
    - { name: "{{ beegfs_meta_path }}", enable: "{{ beegfs_enable.meta }}" } 
    - { name: "{{ beegfs_mgmt_path }}", enable: "{{ beegfs_enable.mgmt }}" }
  when: beegfs_force_format | bool

- include: mgmt.yml
  when: beegfs_enable.mgmt | bool

- include: admon.yml
  when: beegfs_enable.admon | bool

- include: meta.yml
  when: beegfs_enable.meta | bool

- include: oss.yml
  vars:
    oss_path: "{{ item.path | default(beegfs_oss_path_prefix + item.dev) }}"
    oss_port: "{{ item.port }}"
    oss_dev: "{{ item.dev | default(omit) }}"
  with_items: "{{ beegfs_oss }}"
  when: beegfs_enable.oss | bool

- include: tuning.yml
  when: beegfs_enable.oss | bool

- include: client.yml
  vars:
    client_mgmt_host: "{{ item.mgmt_host | default(beegfs_mgmt_host) }}"
    client_path: "{{ item.path }}"
    client_port: "{{ item.port }}"
  with_items: "{{ beegfs_client }}"
  when: beegfs_enable.client | bool

- name: Create connInterfacesFile
  template:
    src: connInterfacesFile.j2
    dest: /etc/beegfs/connInterfacesFile
  become: yes

- name: Start and enable BeeGFS server services
  service:
    name: "{{ item.name }}"
    enabled: yes
    state: "{{ item.state | default(omit) }}"
  become: yes
  when: item.enable | bool
  with_items:
  - { name: beegfs-mgmtd, enable: "{{ beegfs_enable.mgmt }}", state: started }
  - { name: beegfs-meta, enable: "{{ beegfs_enable.meta }}", state: started }
  - { name: beegfs-admon, enable: "{{ beegfs_enable.admon }}", state: started }
  - { name: beegfs-tuning, enable: "{{ beegfs_enable.oss }}" }

- name: Start and enable BeeGFS storage services
  service:
    name: "beegfs-storage@{{ item.port }}"
    enabled: yes
    state: started
  become: yes
  when: beegfs_enable.oss | bool
  with_items: "{{ beegfs_oss }}"

- name: Start and enable BeeGFS client services
  service:
    name: "{{ item.name }}"
    enabled: yes
    state: started
  become: yes
  when: item.enable | bool
  with_items:
  - { name: beegfs-helperd, enable: "{{ beegfs_enable.client }}" }
  - { name: beegfs-client, enable: "{{ beegfs_enable.client }}" }
  retries: 3
  delay: 3
  register: result
  until: result is success
...
